[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "agent-forge"
version = "2.0.0"
description = "Multi-agent system for intelligent task execution and coordination"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Agent Forge Team", email = "team@agentforge.dev"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Distributed Computing",
]
keywords = [
    "ai", "artificial-intelligence", "multi-agent", "agents",
    "coordination", "distributed-systems", "machine-learning",
    "automation", "intelligent-systems", "swarm-intelligence"
]
requires-python = ">=3.8"
dependencies = [
    "pydantic>=2.0.0",
    "pydantic-settings>=2.0.0",
    "fastapi>=0.104.0",
    "uvicorn[standard]>=0.24.0",
    "aiohttp>=3.9.0",
    "numpy>=1.24.0",
    "python-jose[cryptography]>=3.3.0",
    "passlib[bcrypt]>=1.7.4",
    "python-multipart>=0.0.6",
    "click>=8.1.0",
    "python-dotenv>=1.0.0",
    "tqdm>=4.66.0",
]

[project.optional-dependencies]
ai = [
    "torch>=2.0.0",
    "scikit-learn>=1.3.0",
    "sentence-transformers>=2.2.0",
]
cache = [
    "aioredis>=2.0.0",
]
data = [
    "networkx>=3.0",
    "pandas>=2.0.0",
]
database = [
    "sqlalchemy>=2.0.0",
    "alembic>=1.12.0",
]
dev = [
    "pytest>=7.4.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.1.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
]
viz = [
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
]
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
]
jupyter = [
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

[project.urls]
Homepage = "https://github.com/agent-forge/agent-forge"
Documentation = "https://agent-forge.readthedocs.io/"
Repository = "https://github.com/agent-forge/agent-forge"
"Bug Reports" = "https://github.com/agent-forge/agent-forge/issues"

[project.scripts]
agent-forge = "agent_forge.cli:main"

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
agent_forge = ["templates/*.json", "config/*.yaml"]

# Black formatting
[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

# MyPy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "sklearn.*",
    "sentence_transformers.*",
    "networkx.*",
    "matplotlib.*",
    "seaborn.*",
    "pandas.*",
]
ignore_missing_imports = true

# Pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
asyncio_mode = "auto"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
    "e2e: marks tests as end-to-end tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"