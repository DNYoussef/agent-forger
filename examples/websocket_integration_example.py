#!/usr/bin/env python3\n\"\"\"\nWebSocket Integration Example\n============================\n\nComplete example showing how to integrate WebSocket progress streaming\ninto an existing Agent Forge application while maintaining HTTP fallback.\n\nThis example demonstrates:\n1. Starting both WebSocket and HTTP servers\n2. Integrating progress hooks into training loops\n3. Frontend integration with automatic fallback\n4. Error handling and recovery\n5. Session management\n\"\"\"\n\nimport asyncio\nimport json\nimport logging\nimport threading\nimport time\nfrom datetime import datetime\nfrom typing import Optional, Dict, Any\n\n# Configure logging\nlogging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogger = logging.getLogger(__name__)\n\n# Import our WebSocket components\nimport sys\nimport os\nsys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))\n\nfrom src.fastapi_websocket_server import app as websocket_app, create_fastapi_emitter\nfrom src.agent_forge_integration import CognateCreatorIntegration, create_progress_hooks\nfrom src.websocket_progress import initialize_websocket_server, get_websocket_server\n\n\nclass AgentForgeWebSocketDemo:\n    \"\"\"Complete demonstration of Agent Forge WebSocket integration.\"\"\"\n    \n    def __init__(self, websocket_port: int = 8001, flask_port: int = 8000):\n        self.websocket_port = websocket_port\n        self.flask_port = flask_port\n        self.websocket_server = None\n        self.flask_server = None\n        self.server_threads = []\n    \n    async def start_websocket_server(self):\n        \"\"\"Start the WebSocket server.\"\"\"\n        import uvicorn\n        \n        config = uvicorn.Config(\n            app=websocket_app,\n            host=\"0.0.0.0\",\n            port=self.websocket_port,\n            log_level=\"info\"\n        )\n        server = uvicorn.Server(config)\n        \n        logger.info(f\"Starting WebSocket server on port {self.websocket_port}\")\n        await server.serve()\n    \n    def start_flask_server(self):\n        \"\"\"Start the existing Flask server (HTTP fallback).\"\"\"\n        try:\n            from src.api_server import app as flask_app\n            \n            def run_flask():\n                flask_app.run(\n                    host=\"0.0.0.0\", \n                    port=self.flask_port, \n                    debug=False, \n                    use_reloader=False\n                )\n            \n            flask_thread = threading.Thread(target=run_flask, daemon=True)\n            flask_thread.start()\n            self.server_threads.append(flask_thread)\n            \n            logger.info(f\"Flask server started on port {self.flask_port}\")\n            \n        except ImportError:\n            logger.warning(\"Flask server not available, using WebSocket server only\")\n    \n    async def demonstrate_basic_integration(self):\n        \"\"\"Demonstrate basic WebSocket integration.\"\"\"\n        logger.info(\"\\n=== Basic WebSocket Integration Demo ===\")\n        \n        session_id = f\"demo-basic-{int(time.time())}\"\n        logger.info(f\"Starting demo with session ID: {session_id}\")\n        \n        # Create progress emitter\n        emitter = create_fastapi_emitter(session_id)\n        \n        # Simulate training process\n        total_steps = 50\n        total_models = 2\n        \n        try:\n            # Emit training start\n            await emitter.emit_step_update(\n                step=0,\n                loss=5.0,\n                model_idx=0,\n                total_steps=total_steps,\n                total_models=total_models\n            )\n            \n            logger.info(\"Training simulation started...\")\n            \n            for model_idx in range(total_models):\n                logger.info(f\"Starting model {model_idx + 1}/{total_models}\")\n                \n                for step in range(1, (total_steps // total_models) + 1):\n                    global_step = step + (model_idx * (total_steps // total_models))\n                    \n                    # Simulate decreasing loss\n                    loss = 5.0 * (0.95 ** global_step) + 0.1\n                    \n                    # Emit progress update\n                    await emitter.emit_step_update(\n                        step=global_step,\n                        loss=loss,\n                        model_idx=model_idx,\n                        total_steps=total_steps,\n                        total_models=total_models\n                    )\n                    \n                    # Log every 5 steps\n                    if step % 5 == 0:\n                        logger.info(f\"Step {global_step}/{total_steps}: Loss = {loss:.4f}\")\n                    \n                    # Small delay to simulate training time\n                    await asyncio.sleep(0.1)\n                \n                # Emit model completion\n                final_loss = 5.0 * (0.95 ** ((model_idx + 1) * (total_steps // total_models))) + 0.1\n                await emitter.emit_model_completed(model_idx, final_loss)\n                logger.info(f\"Model {model_idx + 1} completed with final loss: {final_loss:.4f}\")\n            \n            # Emit phase completion\n            await emitter.emit_phase_completed(\"training_complete\", status=\"completed\")\n            logger.info(\"Training simulation completed successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Training simulation failed: {e}\")\n            await emitter.emit_error(f\"Training failed: {str(e)}\")\n        \n        return session_id\n    \n    async def demonstrate_error_recovery(self):\n        \"\"\"Demonstrate error handling and recovery.\"\"\"\n        logger.info(\"\\n=== Error Recovery Demo ===\")\n        \n        session_id = f\"demo-error-{int(time.time())}\"\n        logger.info(f\"Starting error recovery demo with session ID: {session_id}\")\n        \n        emitter = create_fastapi_emitter(session_id)\n        \n        try:\n            # Start normal training\n            await emitter.emit_step_update(step=1, loss=3.0, total_steps=10)\n            logger.info(\"Started training simulation\")\n            \n            # Simulate error after a few steps\n            await asyncio.sleep(0.5)\n            await emitter.emit_step_update(step=2, loss=2.8, total_steps=10)\n            \n            await asyncio.sleep(0.5)\n            error_message = \"Simulated training error: GPU out of memory\"\n            await emitter.emit_error(error_message)\n            logger.warning(f\"Emitted error: {error_message}\")\n            \n            # Wait a moment, then recover\n            await asyncio.sleep(1.0)\n            logger.info(\"Recovering from error...\")\n            \n            # Resume training\n            await emitter.emit_step_update(step=3, loss=2.5, total_steps=10)\n            await emitter.emit_step_update(step=4, loss=2.2, total_steps=10)\n            \n            # Complete successfully\n            await emitter.emit_phase_completed(\"recovery_complete\")\n            logger.info(\"Error recovery completed successfully\")\n            \n        except Exception as e:\n            logger.error(f\"Error recovery demo failed: {e}\")\n        \n        return session_id\n    \n    def demonstrate_cognate_integration(self):\n        \"\"\"Demonstrate integration with CognateCreator.\"\"\"\n        logger.info(\"\\n=== Cognate Integration Demo ===\")\n        \n        session_id = f\"demo-cognate-{int(time.time())}\"\n        logger.info(f\"Starting cognate integration demo with session ID: {session_id}\")\n        \n        try:\n            # Create integration instance\n            integration = CognateCreatorIntegration(session_id)\n            \n            # Run cognate creation with progress tracking\n            results = integration.create_cognates_with_progress(\n                num_models=3,\n                steps_per_model=30\n            )\n            \n            logger.info(f\"Cognate integration completed successfully\")\n            logger.info(f\"Results: {results}\")\n            \n            return session_id, results\n            \n        except Exception as e:\n            logger.error(f\"Cognate integration demo failed: {e}\")\n            return session_id, None\n    \n    async def demonstrate_session_monitoring(self, session_ids: list):\n        \"\"\"Demonstrate session monitoring capabilities.\"\"\"\n        logger.info(\"\\n=== Session Monitoring Demo ===\")\n        \n        import requests\n        \n        try:\n            # Check health\n            health_response = requests.get(f\"http://localhost:{self.websocket_port}/api/health\")\n            if health_response.status_code == 200:\n                health_data = health_response.json()\n                logger.info(f\"Server health: {health_data['status']}\")\n                logger.info(f\"Active sessions: {health_data['active_sessions']}\")\n            \n            # List all sessions\n            sessions_response = requests.get(f\"http://localhost:{self.websocket_port}/api/sessions\")\n            if sessions_response.status_code == 200:\n                sessions_data = sessions_response.json()\n                logger.info(f\"Total sessions: {sessions_data['total']}\")\n                \n                for session in sessions_data.get('sessions', []):\n                    logger.info(f\"  Session {session['sessionId']}: {session['status']} ({session['connectionCount']} connections)\")\n            \n            # Check individual session data\n            for session_id in session_ids:\n                if session_id:\n                    progress_response = requests.get(f\"http://localhost:{self.websocket_port}/api/progress/{session_id}\")\n                    if progress_response.status_code == 200:\n                        progress_data = progress_response.json()\n                        metrics = progress_data['metrics']\n                        logger.info(f\"Session {session_id}: Step {metrics['currentStep']}, Loss {metrics['loss']:.4f}\")\n        \n        except Exception as e:\n            logger.error(f\"Session monitoring failed: {e}\")\n    \n    def generate_frontend_example(self):\n        \"\"\"Generate frontend integration example.\"\"\"\n        logger.info(\"\\n=== Frontend Integration Example ===\")\n        \n        example_html = \"\"\"\n<!DOCTYPE html>\n<html>\n<head>\n    <title>Agent Forge WebSocket Demo</title>\n    <script src=\"https://cdn.socket.io/4.5.0/socket.io.min.js\"></script>\n</head>\n<body>\n    <div id=\"status\">Connecting...</div>\n    <div id=\"progress\">\n        <div>Step: <span id=\"currentStep\">0</span>/<span id=\"totalSteps\">0</span></div>\n        <div>Loss: <span id=\"loss\">0.00</span></div>\n        <div>Model: <span id=\"currentModel\">0</span>/<span id=\"totalModels\">0</span></div>\n        <div>Progress: <span id=\"grokProgress\">0</span>%</div>\n    </div>\n    <div id=\"messages\"></div>\n    \n    <script>\n        const sessionId = 'demo-session-' + Date.now();\n        let socket = null;\n        let fallbackInterval = null;\n        \n        // WebSocket connection\n        function connectWebSocket() {\n            const wsUrl = 'ws://localhost:8001';\n            socket = io(wsUrl);\n            \n            socket.on('connect', () => {\n                console.log('WebSocket connected');\n                document.getElementById('status').textContent = 'WebSocket Connected';\n                socket.emit('join_room', sessionId);\n                \n                // Stop HTTP polling if running\n                if (fallbackInterval) {\n                    clearInterval(fallbackInterval);\n                    fallbackInterval = null;\n                }\n            });\n            \n            socket.on('disconnect', () => {\n                console.log('WebSocket disconnected');\n                document.getElementById('status').textContent = 'WebSocket Disconnected - Using HTTP Fallback';\n                startHttpFallback();\n            });\n            \n            socket.on('progress_update', (data) => {\n                console.log('Progress update:', data);\n                updateUI(data.metrics);\n                addMessage(`WebSocket: ${data.eventType} - Step ${data.metrics.currentStep}`);\n            });\n            \n            socket.on('training_error', (data) => {\n                console.error('Training error:', data);\n                addMessage(`ERROR: ${data.error}`, 'error');\n            });\n        }\n        \n        // HTTP fallback polling\n        function startHttpFallback() {\n            if (fallbackInterval) return;\n            \n            fallbackInterval = setInterval(async () => {\n                try {\n                    const response = await fetch(`http://localhost:8001/api/progress/${sessionId}`);\n                    if (response.ok) {\n                        const data = await response.json();\n                        updateUI(data.metrics);\n                        document.getElementById('status').textContent = 'HTTP Polling Active';\n                    }\n                } catch (error) {\n                    console.error('HTTP polling failed:', error);\n                }\n            }, 1000);\n        }\n        \n        // Update UI with metrics\n        function updateUI(metrics) {\n            document.getElementById('currentStep').textContent = metrics.currentStep;\n            document.getElementById('totalSteps').textContent = metrics.totalSteps;\n            document.getElementById('loss').textContent = metrics.loss.toFixed(4);\n            document.getElementById('currentModel').textContent = metrics.currentModel;\n            document.getElementById('totalModels').textContent = metrics.totalModels;\n            document.getElementById('grokProgress').textContent = metrics.grokProgress;\n        }\n        \n        // Add message to log\n        function addMessage(message, type = 'info') {\n            const messagesDiv = document.getElementById('messages');\n            const messageEl = document.createElement('div');\n            messageEl.textContent = new Date().toLocaleTimeString() + ': ' + message;\n            messageEl.className = type;\n            messagesDiv.appendChild(messageEl);\n            messagesDiv.scrollTop = messagesDiv.scrollHeight;\n        }\n        \n        // Start connection\n        connectWebSocket();\n        \n        // Start HTTP fallback as backup\n        setTimeout(startHttpFallback, 2000);\n    </script>\n    \n    <style>\n        body { font-family: Arial, sans-serif; margin: 20px; }\n        #progress div { margin: 5px 0; }\n        #messages { \n            height: 200px; \n            overflow-y: auto; \n            border: 1px solid #ccc; \n            padding: 10px; \n            margin-top: 20px;\n        }\n        .error { color: red; }\n    </style>\n</body>\n</html>\n        \"\"\"\n        \n        # Save example HTML\n        example_path = os.path.join(os.path.dirname(__file__), '..', 'examples', 'websocket_demo.html')\n        os.makedirs(os.path.dirname(example_path), exist_ok=True)\n        \n        with open(example_path, 'w') as f:\n            f.write(example_html)\n        \n        logger.info(f\"Frontend example saved to: {example_path}\")\n        logger.info(\"Open this file in a browser to see the WebSocket integration in action\")\n    \n    async def run_complete_demo(self):\n        \"\"\"Run the complete demonstration.\"\"\"\n        logger.info(\"\\n🚀 Starting Agent Forge WebSocket Integration Demo\")\n        logger.info(f\"WebSocket Server: http://localhost:{self.websocket_port}\")\n        logger.info(f\"Flask Server: http://localhost:{self.flask_port}\")\n        \n        # Start servers\n        logger.info(\"\\nStarting servers...\")\n        self.start_flask_server()\n        \n        # Start WebSocket server in background\n        websocket_task = asyncio.create_task(self.start_websocket_server())\n        \n        # Give servers time to start\n        await asyncio.sleep(3)\n        \n        # Track session IDs for monitoring\n        session_ids = []\n        \n        try:\n            # Run basic integration demo\n            session_id = await self.demonstrate_basic_integration()\n            session_ids.append(session_id)\n            \n            await asyncio.sleep(2)\n            \n            # Run error recovery demo\n            error_session_id = await self.demonstrate_error_recovery()\n            session_ids.append(error_session_id)\n            \n            await asyncio.sleep(2)\n            \n            # Run cognate integration demo\n            cognate_session_id, results = self.demonstrate_cognate_integration()\n            session_ids.append(cognate_session_id)\n            \n            await asyncio.sleep(2)\n            \n            # Demonstrate session monitoring\n            await self.demonstrate_session_monitoring(session_ids)\n            \n            # Generate frontend example\n            self.generate_frontend_example()\n            \n            logger.info(\"\\n✅ Demo completed successfully!\")\n            logger.info(\"\\nSummary:\")\n            logger.info(f\"  - Sessions created: {len(session_ids)}\")\n            logger.info(f\"  - WebSocket server: Running on port {self.websocket_port}\")\n            logger.info(f\"  - HTTP fallback: Available\")\n            logger.info(f\"  - Frontend example: Generated\")\n            \n            # Keep servers running for a bit\n            logger.info(\"\\n⏳ Servers will continue running for 30 seconds for testing...\")\n            logger.info(f\"   Visit http://localhost:{self.websocket_port}/api/health to check server status\")\n            logger.info(f\"   Visit http://localhost:{self.websocket_port}/api/sessions to see active sessions\")\n            \n            await asyncio.sleep(30)\n            \n        except Exception as e:\n            logger.error(f\"Demo failed: {e}\")\n            import traceback\n            traceback.print_exc()\n        \n        finally:\n            # Cancel WebSocket server\n            websocket_task.cancel()\n            logger.info(\"\\n🏁 Demo finished\")\n\n\n# Example usage functions\ndef quick_demo():\n    \"\"\"Run a quick demonstration.\"\"\"\n    demo = AgentForgeWebSocketDemo()\n    asyncio.run(demo.run_complete_demo())\n\n\ndef integration_example():\n    \"\"\"Show how to integrate WebSocket into existing code.\"\"\"\n    print(\"\\n=== Integration Example ===\")\n    print(\"\"\"\n# How to add WebSocket support to existing training code:\n\n# 1. Import the integration components\nfrom src.agent_forge_integration import create_progress_hooks\nfrom src.fastapi_websocket_server import create_fastapi_emitter\n\n# 2. Create progress hooks for your session\nsession_id = \"my-training-session-123\"\nprogress_hooks = create_progress_hooks(session_id)\n\n# 3. Add progress emissions to your existing training loop\ndef my_existing_training_function(model, train_loader):\n    total_steps = len(train_loader)\n    \n    # Emit training start\n    progress_hooks.emit_training_started(total_steps=total_steps, total_models=1)\n    \n    for step, batch in enumerate(train_loader):\n        # ... existing training code ...\n        \n        # Compute loss (existing code)\n        loss = compute_loss(model, batch)\n        \n        # Existing print statement (keep unchanged)\n        if step % 10 == 0:\n            print(f\"Step {step}: Loss = {loss:.4f}\")\n        \n        # Add WebSocket emission (new, non-breaking)\n        progress_hooks.emit_step_update(\n            step=step,\n            loss=loss,\n            total_steps=total_steps\n        )\n        \n        # ... rest of existing training code ...\n    \n    # Emit completion\n    progress_hooks.emit_phase_completed(\"training_complete\")\n\n# 4. That's it! WebSocket updates will be sent automatically\n# 5. HTTP polling will continue to work as fallback\n    \"\"\")\n\n\nif __name__ == '__main__':\n    import argparse\n    \n    parser = argparse.ArgumentParser(description=\"Agent Forge WebSocket Integration Demo\")\n    parser.add_argument('--mode', choices=['demo', 'integration', 'quick'], \n                       default='demo', help='Demo mode to run')\n    parser.add_argument('--websocket-port', type=int, default=8001,\n                       help='WebSocket server port')\n    parser.add_argument('--flask-port', type=int, default=8000,\n                       help='Flask server port')\n    \n    args = parser.parse_args()\n    \n    if args.mode == 'quick':\n        quick_demo()\n    elif args.mode == 'integration':\n        integration_example()\n    else:\n        demo = AgentForgeWebSocketDemo(\n            websocket_port=args.websocket_port,\n            flask_port=args.flask_port\n        )\n        asyncio.run(demo.run_complete_demo())